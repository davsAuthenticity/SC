package com.cloudit;

import java.io.IOException;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.cloud.storage.Acl;
import com.google.cloud.storage.Acl.Role;
import com.google.cloud.storage.Acl.User;
import com.google.cloud.storage.BlobInfo;
import com.google.cloud.storage.Storage;
import com.google.cloud.storage.StorageOptions;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.Part;

import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

/**
 * Servlet implementation class GoogleCloudUploadServlet
 */
public class GoogleCloudUploadServlet extends HttpServlet {
	
	private static Storage storage = null;
	
	static {
	    storage = StorageOptions.getDefaultInstance().getService();
	  }
	
	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.getWriter().append("Served at: ").append(request.getContextPath());
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		//doGet(request, response);
		
		Part filePart =  request.getPart("myFile");
		String bucket = "avsfilestorage";
		
		String link = uploadFile(filePart, bucket);
		
		RequestDispatcher dispatcher = request.getRequestDispatcher("/views/index.jsp");
		dispatcher.forward(request, response);
	}

	public String uploadFile(Part filePart, final String bucketName) throws IOException {
	    DateTimeFormatter dtf = DateTimeFormat.forPattern("-YYYY-MM-dd-HHmmssSSS");
	    DateTime dt = DateTime.now(DateTimeZone.UTC);
	    String dtString = dt.toString(dtf);
	    final String fileName = filePart.getSubmittedFileName() + dtString;

	    // the inputstream is closed by default, so we don't need to close it here
	    BlobInfo blobInfo =
	        storage.create(
	            BlobInfo
	                .newBuilder(bucketName, fileName)
	                // Modify access list to allow all users with link to read file
	                .setAcl(new ArrayList<>(Arrays.asList(Acl.of(User.ofAllUsers(), Role.READER))))
	                .build(),
	            filePart.getInputStream());
	    // return the public download link
	    return blobInfo.getMediaLink();
	 }
	
	public String getImageUrl(HttpServletRequest req, HttpServletResponse resp,
            final String bucket) throws IOException, ServletException {
		Part filePart = req.getPart("myFile");
		final String fileName = filePart.getSubmittedFileName();
		String imageUrl = req.getParameter("imageUrl");
		// Check extension of file
		if (fileName != null && !fileName.isEmpty() && fileName.contains(".")) {
		final String extension = fileName.substring(fileName.lastIndexOf('.') + 1);
		String[] allowedExt = {"jpg", "jpeg", "png", "gif"};
		for (String s : allowedExt) {
		if (extension.equals(s)) {
		return this.uploadFile(filePart, bucket);
		}
		}
		throw new ServletException("file must be an image");
		}
		return imageUrl;
	}
		// [END getImageUrl]
}
